name: Build CI Pipeline

on:
  push:
    branches:
      - main  
jobs:
  project-testing: # Name of the job or that could be any
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies 
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install necessary project development dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download NLTK data
        run: |
          python -m nltk.downloader wordnet

      - name: Run DVC pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro
    
      - name: Push DVC-tracked data to remote
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1  # Replace with your AWS region
        run: |
          dvc push

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add changes to Git
        run: |
          git add .

      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"

      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.ref_name }}
      
      - name: Login to AWS ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 730335254649.dkr.ecr.eu-north-1.amazonaws.com

      - name: Build Docker image
        if: success()
        run: |
          docker build -t yt-comments-sentiment-analysis .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag yt-comments-sentiment-analysis:latest 730335254649.dkr.ecr.eu-north-1.amazonaws.com/yt-comments-sentiment-analysis:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push 730335254649.dkr.ecr.eu-north-1.amazonaws.com/yt-comments-sentiment-analysis:latest

      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://yt-chrome-plugin/deployment.zip

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name YTChromePlugin \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name YTChromePluginDeploymentGroup \
            --s3-location bucket=yt-chrome-plugin,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region eu-north-1



